name: Build
on: push

env:
  ANDROID_SDK_TOOLS:  "4333796"
  ANDROID_NDK:        "20.1.5948944"
  ANDROID_CMAKE:      "3.10.2.4988404"
  TARBALL_CACHE_KEY:  "tarballs-key-1"

jobs:
  build:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        abi: [ x86, x86_64, armeabi-v7a, arm64-v8a ]
        buildType: [ Debug, Release ]
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Cache android-sdk.zip
        uses: actions/cache@v1
        with:
          key: android-sdk.zip-${{ env.ANDROID_SDK_TOOLS }}
          path: android-sdk

      - run: .github/installAndroidTools.sh

      - run: .github/installBuildDependencies.sh

      - name: Cache tarballs
        uses: actions/cache@v1
        with:
          key: ${{ env.TARBALL_CACHE_KEY }}
          path: dependency-builder/src/main/cpp/tarballs

      - run: ./dodownloadtarballs --serial

      - name: Build dependencies of wvWare-Android
        run: ./gradlew dependency-builder:assemble${{ matrix.buildType }} -PdisablePreDex -Pabi=${{ matrix.abi }}

      - name: Gather licenses
        if: matrix.abi == 'armeabi-v7a' && matrix.buildType == 'Release'
        run: ./gradlew dependency-builder:gatherLicenses -PdisablePreDex -Pabi=${{ matrix.abi }}

      - name: Artifact gathered licenses
        if: matrix.abi == 'armeabi-v7a' && matrix.buildType == 'Release'
        uses: actions/upload-artifact@v1
        with:
          name: licenses
          path: dependency-builder/build/licenses.xml

      - name: Prepare built dependencies for artifacting
        if: matrix.buildType == 'Release'
        run: |
          mkdir --parents pdeps/bin
          mv dependency-builder/build/installed/MinSizeRel/${{ matrix.abi }}/bin/pkg-config pdeps/bin/
          mv dependency-builder/build/installed/MinSizeRel/${{ matrix.abi }}/include pdeps/
          mv dependency-builder/build/installed/MinSizeRel/${{ matrix.abi }}/lib pdeps/

      - name: Prepare built dependencies for artifacting
        if: matrix.buildType == 'Debug'
        run: |
          mkdir --parents pdeps/bin
          mv dependency-builder/build/installed/Debug/${{ matrix.abi }}/bin/pkg-config pdeps/bin/
          mv dependency-builder/build/installed/Debug/${{ matrix.abi }}/include pdeps/
          mv dependency-builder/build/installed/Debug/${{ matrix.abi }}/lib pdeps/

      - name: Artifact built dependencies
        uses: actions/upload-artifact@v1
        with:
          name: dependencies-${{ matrix.buildType }}-${{ matrix.abi }}
          path: pdeps

      - name: Artifact assets
        if: matrix.abi == 'armeabi-v7a' && matrix.buildType == 'Release'
        uses: actions/upload-artifact@v1
        with:
          name: wv-assets
          path: dependency-builder/build/assets/wv

  buildAllABIs:
    needs: build
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Cache android-sdk.zip
        uses: actions/cache@v1
        with:
          key: android-sdk.zip-${{ env.ANDROID_SDK_TOOLS }}
          path: android-sdk

      - run: .github/installAndroidTools.sh

      - name: Cache tarballs
        uses: actions/cache@v1
        with:
          key: ${{ env.TARBALL_CACHE_KEY }}
          path: dependency-builder/src/main/cpp/tarballs

      - run: ./dodownloadtarballs --serial

      - name: Download artifacted dependencies - x86 - release
        uses: actions/download-artifact@v1
        with:
          name: dependencies-Release-x86
          path: dependency-builder/build/installed/MinSizeRel/x86

      - name: Download artifacted dependencies - x86_64 - release
        uses: actions/download-artifact@v1
        with:
          name: dependencies-Release-x86_64
          path: dependency-builder/build/installed/MinSizeRel/x86_64

      - name: Download artifacted dependencies - armeabi-v7a - release
        uses: actions/download-artifact@v1
        with:
          name: dependencies-Release-armeabi-v7a
          path: dependency-builder/build/installed/MinSizeRel/armeabi-v7a

      - name: Download artifacted dependencies - arm64-v8a - release
        uses: actions/download-artifact@v1
        with:
          name: dependencies-Release-arm64-v8a
          path: dependency-builder/build/installed/MinSizeRel/arm64-v8a

      - name: Download artifacted dependencies - x86 - debug
        uses: actions/download-artifact@v1
        with:
          name: dependencies-Debug-x86
          path: dependency-builder/build/installed/Debug/x86

      - name: Download artifacted dependencies - x86_64 - debug
        uses: actions/download-artifact@v1
        with:
          name: dependencies-Debug-x86_64
          path: dependency-builder/build/installed/Debug/x86_64

      - name: Download artifacted dependencies - armeabi-v7a - debug
        uses: actions/download-artifact@v1
        with:
          name: dependencies-Debug-armeabi-v7a
          path: dependency-builder/build/installed/Debug/armeabi-v7a

      - name: Download artifacted dependencies - arm64-v8a - debug
        uses: actions/download-artifact@v1
        with:
          name: dependencies-Debug-arm64-v8a
          path: dependency-builder/build/installed/Debug/arm64-v8a

      - name: chmod +x pkg-config's
        run: |
        chmod +x dependency-builder/build/installed/MinSizeRel/x86/bin/pkg-config
        chmod +x dependency-builder/build/installed/MinSizeRel/x86_64/bin/pkg-config
        chmod +x dependency-builder/build/installed/MinSizeRel/armeabi-v7a/bin/pkg-config
        chmod +x dependency-builder/build/installed/MinSizeRel/arm64-v8a/bin/pkg-config
        chmod +x dependency-builder/build/installed/Debug/x86/bin/pkg-config
        chmod +x dependency-builder/build/installed/Debug/x86_64/bin/pkg-config
        chmod +x dependency-builder/build/installed/Debug/armeabi-v7a/bin/pkg-config
        chmod +x dependency-builder/build/installed/Debug/arm64-v8a/bin/pkg-config

      - name: Download artifacted assets
        uses: actions/download-artifact@v1
        with:
          name: wv-assets
          path: dependency-builder/build/assets/wv

      - name: Download artifacted licenses
        uses: actions/download-artifact@v1
        with:
          name: licenses
          path: dependency-builder/build/

      - name: Build wvWare-Android
        run: ./gradlew build -PdisablePreDex

      - name: Get version
        id: get_version
        run: echo "::set-output name=version::$(./getVersion.sh)"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: "wvWare-Android v${{ steps.get_version.outputs.version }} - ${{ github.event.commits[0].message }} - ${{ github.ref }}"
          draft: true
          prerelease: false

      - name: Upload licenses
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dependency-builder/build/licenses.xml
          asset_name: licenses.xml
          asset_content_type: text/xml

      - name: Upload Release aar
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./wvWare/build/outputs/aar/wvware-android-release.aar
          asset_name: wvware-android-release.aar
          asset_content_type: application/zip

      - name: Upload Debug aar
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./wvWare/build/outputs/aar/wvware-android-debug.aar
          asset_name: wvware-android-debug.aar
          asset_content_type: application/zip

      - name: Generate javadoc
        run: ./gradlew javadocJar

      - name: Upload javadoc.jar
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./wvWare/build/libs/wvware-android-${{steps.get_version.outputs.version}}-javadoc.jar
          asset_name: wvware-android-${{steps.get_version.outputs.version}}-javadoc.jar
          asset_content_type: application/zip

      - name: Jar the sources
        run: ./gradlew sourceJar

      - name: Upload sources.jar
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./wvWare/build/libs/wvware-android-${{steps.get_version.outputs.version}}-sources.jar
          asset_name: wvware-android-${{steps.get_version.outputs.version}}-sources.jar
          asset_content_type: application/zip
