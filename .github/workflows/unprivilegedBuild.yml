name: unprivilegedBuild
on:
  workflow_dispatch:
  push:
    branches-ignore: master
    paths-ignore:
      - '**.md'
      - '.github/workflows/manualVersionIncrement*.yml'
      - '.github/workflows/privilegedBuild.yml'

env:
  ANDROID_NDK:        "22.1.7171670"
  ANDROID_CMAKE:      "3.10.2.4988404"
  TARBALL_CACHE_KEY:  "tarballs-key-2"

permissions:
  actions: none
  checks: none
  contents: none
  deployments: none
  issues: none
  packages: none
  pull-requests: none
  repository-projects: none
  security-events: none
  statuses: none

jobs:
  buildDependencies:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        abi: [ x86, x86_64, armeabi-v7a, arm64-v8a ]
        buildType: [ Debug, Release ]
        include:
          - buildType: Debug
            CMakeBuildType: Debug
          - buildType: Release
            CMakeBuildType: MinSizeRel
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: 8
      - uses: android-actions/setup-android@v2
      - run: sdkmanager "ndk;${{env.ANDROID_NDK}}" "cmake;${{env.ANDROID_CMAKE}}"
      - run: sudo -H pip3 install meson

      - name: Cache tarballs
        uses: actions/cache@v3.0.1
        with:
          key: ${{ env.TARBALL_CACHE_KEY }}
          path: dependency-builder/src/main/cpp/tarballs

      - run: ./dodownloadtarballs --serial

      - name: Build dependencies of wvWare-Android
        run: ./gradlew dependency-builder:assemble${{ matrix.buildType }} -PdisablePreDex -Pabi=${{ matrix.abi }}

      - name: Gather licenses
        if: matrix.abi == 'armeabi-v7a' && matrix.buildType == 'Release'
        run: ./gradlew dependency-builder:gatherLicenses -PdisablePreDex -Pabi=${{ matrix.abi }}

      - name: Artifact gathered licenses
        if: matrix.abi == 'armeabi-v7a' && matrix.buildType == 'Release'
        uses: actions/upload-artifact@v2
        with:
          name: licenses
          path: dependency-builder/build/licenses.xml

      - name: Prepare built dependencies for artifacting
        run: |
          mkdir --parents pdeps/bin
          mv dependency-builder/build/installed/${{ matrix.CMakeBuildType }}/${{ matrix.abi }}/bin/pkg-config pdeps/bin/
          mv dependency-builder/build/installed/${{ matrix.CMakeBuildType }}/${{ matrix.abi }}/include pdeps/
          mv dependency-builder/build/installed/${{ matrix.CMakeBuildType }}/${{ matrix.abi }}/lib pdeps/

      - name: Artifact built dependencies
        uses: actions/upload-artifact@v2
        with:
          name: dependencies-${{ matrix.buildType }}-${{ matrix.abi }}
          path: pdeps

      - name: Artifact assets
        if: matrix.abi == 'armeabi-v7a' && matrix.buildType == 'Release'
        uses: actions/upload-artifact@v2
        with:
          name: wv-assets
          path: dependency-builder/build/assets/wv

  build:
    needs: buildDependencies
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: 8
      - uses: android-actions/setup-android@v2
      - run: sdkmanager "ndk;${{env.ANDROID_NDK}}" "cmake;${{env.ANDROID_CMAKE}}"

      - name: Cache tarballs
        uses: actions/cache@v3.0.1
        with:
          key: ${{ env.TARBALL_CACHE_KEY }}
          path: dependency-builder/src/main/cpp/tarballs

      - run: ./dodownloadtarballs --serial

      - name: Download artifacted dependencies - x86 - release
        uses: actions/download-artifact@v1
        with:
          name: dependencies-Release-x86
          path: dependency-builder/build/installed/MinSizeRel/x86

      - name: Download artifacted dependencies - x86_64 - release
        uses: actions/download-artifact@v1
        with:
          name: dependencies-Release-x86_64
          path: dependency-builder/build/installed/MinSizeRel/x86_64

      - name: Download artifacted dependencies - armeabi-v7a - release
        uses: actions/download-artifact@v1
        with:
          name: dependencies-Release-armeabi-v7a
          path: dependency-builder/build/installed/MinSizeRel/armeabi-v7a

      - name: Download artifacted dependencies - arm64-v8a - release
        uses: actions/download-artifact@v1
        with:
          name: dependencies-Release-arm64-v8a
          path: dependency-builder/build/installed/MinSizeRel/arm64-v8a

      - name: Download artifacted dependencies - x86 - debug
        uses: actions/download-artifact@v1
        with:
          name: dependencies-Debug-x86
          path: dependency-builder/build/installed/Debug/x86

      - name: Download artifacted dependencies - x86_64 - debug
        uses: actions/download-artifact@v1
        with:
          name: dependencies-Debug-x86_64
          path: dependency-builder/build/installed/Debug/x86_64

      - name: Download artifacted dependencies - armeabi-v7a - debug
        uses: actions/download-artifact@v1
        with:
          name: dependencies-Debug-armeabi-v7a
          path: dependency-builder/build/installed/Debug/armeabi-v7a

      - name: Download artifacted dependencies - arm64-v8a - debug
        uses: actions/download-artifact@v1
        with:
          name: dependencies-Debug-arm64-v8a
          path: dependency-builder/build/installed/Debug/arm64-v8a

      - run: chmod +x dependency-builder/build/installed/{MinSizeRel,Debug}/{x86,x86_64,armeabi-v7a,arm64-v8a}/bin/pkg-config

      - name: Download artifacted wv assets
        uses: actions/download-artifact@v1
        with:
          name: wv-assets
          path: dependency-builder/build/assets/wv

      - name: Download artifacted licenses
        uses: actions/download-artifact@v1
        with:
          name: licenses
          path: dependency-builder/build/

      - run: ./gradlew assembleRelease -PdisablePreDex

      - run: ./gradlew publishToMavenLocal

      - uses: actions/upload-artifact@v2
        with:
          name: maven-local
          path: ~/.m2

  buildSampleApp:
    needs: build
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: 8
      - uses: android-actions/setup-android@v2

      - uses: actions/download-artifact@v2
        with:
          name: maven-local
          path: ~/.m2

      - name: Prepare sample app for staging repository
        run: ./ci-scripts/prepareSampleAppForStagingRepository sample-app app --output=build/sampleapp-staging --repository=mavenLocal

      - name: Build sample app from staging library
        run: ./gradlew build
        working-directory: build/sampleapp-staging

      - uses: actions/upload-artifact@v2
        with:
          name: sampleapp-staging
          path: build/sampleapp-staging/app/build/outputs/apk/**/*.apk

      - uses: actions/upload-artifact@v2
        with:
          name: app-lint-results
          path: build/sampleapp-staging/app/build/reports/*

  staging:
    needs: build
    # Only macos VMs are available with exposed CPU extensions to run hardware accelerated emulator
    runs-on: macos-10.15
    strategy:
      fail-fast: false
      matrix:
        api-level: [ 16, 21, 30 ]
        arch: [ x86, x86_64 ]
        target: [ default ]
        include:
          - api-level: 30
            arch: x86
            target: google_apis
          - api-level: 30
            arch: x86_64
            target: google_apis
        exclude:
          - api-level: 16
            arch: x86_64
          - api-level: 30
            target: default
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: 8
      - uses: android-actions/setup-android@v2

      - uses: actions/download-artifact@v2
        with:
          name: maven-local
          path: ~/.m2

      - run: ./ci-scripts/prepareLibraryTestsForStagingRepository wvWare --output=build/lib-staging --repository=mavenLocal

      - run: ./gradlew assemble
        working-directory: build/lib-staging

      - uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: ${{ matrix.arch }}
          target: ${{ matrix.target }}
          script: ./gradlew connectedCheck
          working-directory: build/lib-staging
