/*
 * dependency-builder/build.gradle
 *
 * wvWare-Android (https://github.com/ViliusSutkus89/wvWare-Android)
 * Android port of wvWare - library to load and parse Word 2000, 97, 95 and 6 files.
 *
 * Copyright (c) 2019 Vilius Sutkus <ViliusSutkus89@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

apply plugin: 'com.android.library'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        ndk.abiFilters = project.hasProperty('abi') ? [ project.property('abi') ] : null
    }
    buildTypes {
        release.externalNativeBuild {
          cmake.arguments '-DCMAKE_BUILD_TYPE=MinSizeRel'
        }
        debug.externalNativeBuild {
          cmake.arguments '-DBUILD_3RDPARTY_BINARIES=ON'
        }
    }
    externalNativeBuild.cmake {
        path "src/main/cpp/CMakeLists.txt"
        version "3.10.2"
    }
    ndkVersion "20.1.5948944"
}

// Issue #1 (from pdf2htmlEX-Android)
task touchGlibPackage(type: Exec) {
    commandLine 'touch', 'src/main/cpp/packages/glib-2.0.cmake'
}
preBuild.dependsOn touchGlibPackage

task gatherLicenses {
  doLast {
    file("$buildDir/licenses.xml").withWriter { writer ->
        def xml = new groovy.xml.MarkupBuilder(writer)

        xml.doubleQuotes = true
        xml.mkp.xmlDeclaration(version: '1.0', encoding: 'utf-8')

        xml.licenses() {
            def addLicense = { depName, licenseFiles ->
                license {
                    name(depName)
                    def urlVal = new StringBuilder()
                    licenseFiles.each() { licenseFilename ->
                        urlVal.append("$depName/$licenseFilename\n\n")

                        def abi = project.hasProperty('abi') ? project.property('abi') : 'armeabi-v7a'
                        def licenseFile = new File("$projectDir/.cxx/cmake/release/" + abi + "/$depName-prefix/src/$depName/$licenseFilename")
                        def licenseText = licenseFile.getText('UTF-8')
                        // LGPL2.1 and GPLv2 licenses include form feed (page break) characters.
                        // XML does not take kindly to form feed characters.
                        if ((depName =="wvWare") ||
                            (depName == "glib-2.0" && licenseFilename == "COPYING") ||
                            (depName == "iconv" && licenseFilename == "COPYING.LIB") ||
                            (depName == "intl" && licenseFilename == "COPYING") ||
                            (depName =="libgsf")) {
                            urlVal.append(licenseText.replace("\u000C", ""))
                        } else {
                            urlVal.append(licenseText)
                        }
                        urlVal.append("\n\n")
                    }
                    url(urlVal)
                }
            }
            addLicense("wvWare", ["COPYING"])
            addLicense("glib-2.0", ["COPYING"])
            addLicense("iconv", ["README", "COPYING", "COPYING.LIB"])
            addLicense("intl", ["COPYING"])
            addLicense("libffi", ["LICENSE"])
            addLicense("libgsf", ["COPYING", "COPYING.LIB"])
            addLicense("libxml-2.0", ["Copyright"])
        }
    }
  }
}

// wvWare has some data that is needed on runtime
task collectReleaseAssetsFromShareFolder {
    dependsOn ":dependency-builder:externalNativeBuildRelease"
    doLast {
        copy {
            new File("$buildDir/installed/MinSizeRel").eachDir() {
                from("$it/share")
                include("wv/**")
                into("$buildDir/assets")
            }
            duplicatesStrategy('exclude')
        }
    }
}

task collectDebugAssetsFromShareFolder {
    dependsOn ":dependency-builder:externalNativeBuildDebug"
    doLast {
        copy {
            new File("$buildDir/installed/Debug").eachDir() {
                from("$it/share")
                include("wv/**")
                into("$buildDir/assets")
            }
            duplicatesStrategy('exclude')
        }
    }
}

tasks.whenTaskAdded {
    if (it.name == 'generateReleaseAssets') {
        it.dependsOn collectReleaseAssetsFromShareFolder
    }
    else if (it.name == 'generateDebugAssets') {
        it.dependsOn collectDebugAssetsFromShareFolder
    }
    if (it.name == 'externalNativeBuildRelease') {
        gatherLicenses.dependsOn externalNativeBuildRelease
    }
}

