/*
 * dependency-builder/build.gradle
 *
 * wvWare-Android (https://github.com/ViliusSutkus89/wvWare-Android)
 * Android port of wvWare - library to load and parse Word 2000, 97, 95 and 6 files.
 *
 * Copyright (c) 2019 - 2022 ViliusSutkus89.com
 *
 * wvWare-Android is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

apply plugin: 'com.android.library'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 30
        ndk.abiFilters = project.hasProperty('abi') ? [project.property('abi')] : null
    }
    buildTypes {
        release.externalNativeBuild {
            cmake.arguments '-DCMAKE_BUILD_TYPE=MinSizeRel'
        }
        debug.externalNativeBuild {
            cmake.arguments '-DBUILD_3RDPARTY_BINARIES=ON'
        }
    }
    externalNativeBuild.cmake {
        path "src/main/cpp/CMakeLists.txt"
        version "3.10.2"
    }
    ndkVersion "22.1.7171670"
}

// Issue #1 (from pdf2htmlEX-Android)
task touchGlibPackage(type: Exec) {
    commandLine 'touch', 'src/main/cpp/packages/glib-2.0.cmake'
}
preBuild.dependsOn touchGlibPackage

// wvWare has some data that is needed on runtime
task collectReleaseAssetsFromShareFolder {
    dependsOn ":dependency-builder:externalNativeBuildRelease"
    doLast {
        copy {
            new File("$buildDir/installed/MinSizeRel").eachDir() {
                from("$it/share")
                include("wv/**")
                into("$buildDir/assets")
            }
            duplicatesStrategy('exclude')
        }
    }
}

task collectDebugAssetsFromShareFolder {
    dependsOn ":dependency-builder:externalNativeBuildDebug"
    doLast {
        copy {
            new File("$buildDir/installed/Debug").eachDir() {
                from("$it/share")
                include("wv/**")
                into("$buildDir/assets")
            }
            duplicatesStrategy('exclude')
        }
    }
}

tasks.whenTaskAdded {
    if (it.name == 'generateReleaseAssets') {
        it.dependsOn collectReleaseAssetsFromShareFolder
    } else if (it.name == 'generateDebugAssets') {
        it.dependsOn collectDebugAssetsFromShareFolder
    }
}
