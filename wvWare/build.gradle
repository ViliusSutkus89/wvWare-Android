/*
 * wvWare/build.gradle
 *
 * Copyright (c) 2019 - 2021 Vilius Sutkus <ViliusSutkus89@gmail.com>
 *
 * wvWare-Android is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

group = 'com.viliussutkus89'

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'signing'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 30

        versionCode 22
        versionName project.version

        archivesBaseName = rootProject.name

        ndk.abiFilters = project.hasProperty('abi') ? [ project.property('abi') ] : null

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        sourceSets.main.assets.srcDirs = [ "${projectDir}/../dependency-builder/build/assets/" ]
    }
    //#UNCOMMENT-DURING-STAGING# /*
    buildTypes.release.externalNativeBuild {
      cmake.arguments '-DCMAKE_BUILD_TYPE=MinSizeRel'
    }
    externalNativeBuild.cmake {
        path "src/main/cpp/CMakeLists.txt"
        version "3.10.2"
    }
    ndkVersion "22.0.7026061"
    //#UNCOMMENT-DURING-STAGING# */
    buildFeatures.prefab true
}

configurations {
    javadocDependenciesToObtainClasspath
}

dependencies {
    //#UNCOMMENT-DURING-STAGING# /*
    compileOnly project(":dependency-builder")
    //#UNCOMMENT-DURING-STAGING# */
    implementation 'androidx.annotation:annotation:1.2.0'

    implementation 'com.viliussutkus89:tmpfile-android:3.0.4'
    implementation 'com.viliussutkus89:assetextractor-android:1.3.2'

    javadocDependenciesToObtainClasspath 'androidx.annotation:annotation:1.2.0'
    javadocDependenciesToObtainClasspath 'com.viliussutkus89:tmpfile-android:3.0.4'
    javadocDependenciesToObtainClasspath 'com.viliussutkus89:assetextractor-android:1.3.2'

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    //#UNCOMMENT-DURING-STAGING#implementation 'com.viliussutkus89:wvware-android:#STAGING-VERSION#'
    // The line above is used by the scripts/prepareLibraryForStagingRepository
}

task sourceJar(type: Jar) {
    into ("", { from android.sourceSets.main.java.srcDirs} )
    into ("", { from file("../LICENSE")})
    into ("cpp", { from fileTree(dir: "src/main/cpp/") } )
    into ("dependency-builder", { from fileTree(dir: "../dependency-builder/src/main/cpp/") } )
    archiveBaseName.set(rootProject.name)
    archiveClassifier.set('sources')
}

task javadoc(type: Javadoc) {
    options.encoding = 'UTF-8'
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.javadocDependenciesToObtainClasspath
    title = "${rootProject.name} ${project.version} API"
    failOnError = false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                artifactId rootProject.name
                version = rootProject.version

                artifact sourceJar
                artifact javadocJar

                pom {
                    name = rootProject.name
                    description = 'wvWare-Android'
                    url = 'https://github.com/ViliusSutkus89/wvWare-Android'
                    packaging = 'aar'
                    inceptionYear = '2019'
                    developers {
                        developer {
                            id = "ViliusSutkus89"
                            name = "Vilius Sutkus"
                            email = "ViliusSutkus89@gmail.com"
                        }
                    }
                    scm {
                        url = 'https://github.com/ViliusSutkus89/wvWare-Android'
                        connection = 'https://github.com/ViliusSutkus89/wvWare-Android.git'
                    }
                }
            }
        }
    }

    // This may look ugly...
    // but useInMemoryPgpKeys expects valid keys even with required { false }
    if (System.getenv('SIGNING_KEY')) {
        signing {
            required { true }
            useInMemoryPgpKeys(System.getenv('SIGNING_KEY'), System.getenv('SIGNING_PASS'))
            sign publishing.publications.release
        }
    }
}

//#UNCOMMENT-DURING-STAGING# /*
tasks.whenTaskAdded { task ->
    if (task.name == 'generatePomFileForReleasePublication') {
        def gatherLicenses = tasks.getByPath(":dependency-builder:gatherLicenses")
        task.dependsOn(gatherLicenses)
        task.doFirst {
            pom.withXml {
                def licensesNode = asNode().appendNode('licenses')
                def thisProjLicense = licensesNode.appendNode('license')
                thisProjLicense.appendNode('name', 'wvWare-Android')
                thisProjLicense.appendNode('url', 'https://www.gnu.org/licenses/gpl-3.0.en.html')
                thisProjLicense.appendNode('distribution', 'repo')

                new XmlSlurper().parse(gatherLicenses.getOutputXmlFile().get().asFile).license.each {
                    def license = licensesNode.appendNode('license')
                    license.appendNode('name', it.dependencyName)
                    license.appendNode('url', it.licenseText)
                    license.appendNode('distribution', 'repo')
                }
            }
        }
    }
}
//#UNCOMMENT-DURING-STAGING# */
