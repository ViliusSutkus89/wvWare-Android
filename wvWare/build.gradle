/*
 * wvWare/build.gradle
 *
 * wvWare-Android (https://github.com/ViliusSutkus89/wvWare-Android)
 * Android port of wvWare - library to load and parse Word 2000, 97, 95 and 6 files.
 *
 * Copyright (c) 2019 - 2022, 2024 ViliusSutkus89.com
 *
 * wvWare-Android is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

plugins {
    id 'com.android.library'
    id 'maven-publish'
    id 'signing'
    id 'app.opendocument.conanandroidgradleplugin'
}

group = rootProject.group

["armv7", "armv8", "x86", "x86_64"].each { arch ->
    tasks.named("conanInstall-" + arch) {
        profile.set("android-21-" + arch)
    }
}

android {
    namespace "com.viliussutkus89.android.wvware"
    compileSdk 35
    defaultConfig {
        minSdk 21
        targetSdk 35

        archivesBaseName = rootProject.name

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild.cmake.arguments(
                '-DANDROID_STL=c++_shared',
                "-DCMAKE_TOOLCHAIN_FILE=build/conan/android_toolchain.cmake",
                "-DCMAKE_BUILD_TYPE=RelWithDebInfo",
        )
        buildConfigField("String", "VERSION_NAME", "\"${rootProject.version}\"")
    }
    publishing {
        singleVariant("release") {
            withSourcesJar()
            withJavadocJar()
        }
    }

    buildFeatures {
        prefab true
        buildConfig true
    }
    externalNativeBuild.cmake {
        path "CMakeLists.txt"
        version "3.22.1"
    }
    ndkVersion '26.3.11579264'
    sourceSets.main.assets.srcDirs += "build/assets"
    sourceSets.androidTest.assets.srcDirs = [ getProject().parent.getLayout().getProjectDirectory().dir("test/androidTestAssets") ]
}

// Assets delivered by conan are gathered by CMake
afterEvaluate {
    tasks.named("generateDebugAssets").configure {
        dependsOn(tasks.named("mergeDebugNativeLibs"))
    }
    tasks.named("generateReleaseAssets").configure {
        dependsOn(tasks.named("mergeReleaseNativeLibs"))
    }
}

dependencies {
    implementation("androidx.annotation:annotation:1.8.2")
    implementation("com.viliussutkus89:assetextractor-android:1.3.3")
    implementation 'com.getkeepsafe.relinker:relinker:1.4.5'

    androidTestImplementation("androidx.test.ext:junit:1.2.1")
    androidTestImplementation("androidx.test:rules:1.6.1")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.6.1")
}

publishing {
    publications {
        release(MavenPublication) {
            afterEvaluate {
                from components.release
            }

            artifactId rootProject.name
            version = rootProject.version

            pom {
                name = rootProject.name
                description = 'wvWare (wvHtml) library port for Android'
                url = 'https://github.com/opendocument-app/wvWare-Android'
                packaging = 'aar'
                inceptionYear = '2019'
                developers {
                    developer {
                        id = "ViliusSutkus89"
                        name = "Vilius Sutkus"
                        email = "ViliusSutkus89@gmail.com"
                    }
                }
                scm {
                    url = 'https://github.com/opendocument-app/wvWare-Android'
                    connection = 'https://github.com/opendocument-app/wvWare-Android.git'
                }
                licenses {
                    license {
                        name = 'GPLv3'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.html'
                        distribution = 'repo'
                    }
                }
            }
        }
    }
}

if (System.getenv('SIGNING_KEY')) {
    signing {
        required { true }
        useInMemoryPgpKeys(System.getenv('SIGNING_KEY'), System.getenv('SIGNING_PASS'))
        sign publishing.publications.release
    }
}

// Without removing .cxx dir on cleanup, double gradle clean is erroring out.
// Before removing this workaround, check if "./gradlew assembleDebug; ./gradlew clean; ./gradlew clean" works
tasks.named("clean") {
    def dotCxxDir = getLayout().getProjectDirectory().dir(".cxx")
    doFirst {
        delete dotCxxDir
    }
}
