/*
 * wvWare/build.gradle
 *
 * Copyright (c) 2019,2020 Vilius Sutkus <ViliusSutkus89@gmail.com>
 *
 * wvWare-Android is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

version = '1.2.5'
group = 'com.viliussutkus89'

apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'
android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29

        versionCode 21
        versionName project.version

        archivesBaseName = rootProject.name

        ndk.abiFilters = project.hasProperty('abi') ? [ project.property('abi') ] : null

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        sourceSets.main.assets.srcDirs = [ "${projectDir}/../dependency-builder/build/assets/" ]
    }
    buildTypes.release.externalNativeBuild {
      cmake.arguments '-DCMAKE_BUILD_TYPE=MinSizeRel'
    }
    externalNativeBuild.cmake {
        path "src/main/cpp/CMakeLists.txt"
        version "3.10.2"
    }
    ndkVersion "21.1.6352462"
}

task sourceJar(type: Jar) {
    into ("", { from android.sourceSets.main.java.srcDirs} )
    into ("", { from file("../LICENSE")})
    into ("cpp", { from fileTree(dir: "src/main/cpp/") } )
    into ("dependency-builder", { from fileTree(dir: "../dependency-builder/src/main/cpp/") } )
    archiveBaseName = rootProject.name
    archiveClassifier = 'sources'
}

task javadoc(type: Javadoc) {
    options.encoding = 'UTF-8'
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    title = "${rootProject.name} ${project.version} API"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

    publications = ['projectRelease']

    pkg {
        repo = 'maven-repo'
        name = rootProject.name
        desc = 'Android port of wvWare - library to load and parse Word 2000, 97, 95 and 6 files'

        websiteUrl = 'https://github.com/ViliusSutkus89/wvWare-Android'
        vcsUrl = 'https://github.com/ViliusSutkus89/wvWare-Android.git'
        issueTrackerUrl = 'https://github.com/ViliusSutkus89/wvWare-Android/issues'

        licenses = ['GPL-3.0-only']
        labels = ['doc', 'word', 'html', 'word-document-processor', 'android', 'library', 'doc-conversion-library']

        publish = true

        version {
            name = this.version
            released = new Date()
            vcsTag = "v${this.version}"
        }
    }
}

publishing{
    publications {
        projectRelease(MavenPublication) {
            artifactId rootProject.name
            artifact "$buildDir/outputs/aar/${rootProject.name}-release.aar"
            artifact sourceJar
            artifact javadocJar
            pom {
                packaging = 'aar'
                url = 'https://github.com/ViliusSutkus89/wvWare-Android'
                inceptionYear = '2019'
                developers {
                    developer {
                        id = "ViliusSutkus89"
                        name = "Vilius Sutkus"
                        email = "ViliusSutkus89@gmail.com"
                    }
                }
                scm {
                    url = 'https://github.com/ViliusSutkus89/wvWare-Android'
                    connection = 'https://github.com/ViliusSutkus89/wvWare-Android.git'
                }
            }
            pom.withXml {
                def node = asNode()

                def licensesNode = node.appendNode("licenses")
                def thisProjLicense = licensesNode.appendNode('license')

                thisProjLicense.appendNode('name', 'wvWare-Android')
                thisProjLicense.appendNode('url', "wvWare-Android/LICENSE\n\n" + new File("$projectDir/../LICENSE").getText('UTF-8') + "\n\n")
                thisProjLicense.appendNode('distribution', 'repo')

                new XmlSlurper().parse("$projectDir/../dependency-builder/build/licenses.xml").license.each {
                    def license = licensesNode.appendNode('license')
                    license.appendNode('name', it.name)
                    license.appendNode('url', it.url)
                    if (it.distribution) {
                        license.appendNode('distribution', it.distribution)
                    }
                }

                def dependenciesNode = node.appendNode('dependencies')
                // Iterate over the implementation dependencies (we don't want the test ones),
                // adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included in the pom.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

dependencies {
    compileOnly project(":dependency-builder")
    implementation 'androidx.annotation:annotation:1.1.0'

    implementation 'com.viliussutkus89:tmpfile-android:3.0.1'
    implementation 'com.viliussutkus89:assetextractor-android:1.2.1'

    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

publish.dependsOn ":dependency-builder:gatherLicenses"

task extractLibtmpfileSoForLinkingInCMake {
    doLast {
        def tmpfileandroid = configurations.releaseRuntimeClasspath.getResolvedConfiguration().getResolvedArtifacts().find {
            it.name.startsWith("tmpfile-android")
        }
        copy {
            from zipTree(tmpfileandroid.getFile())
            into "${project.buildDir}/tmpfile/"
            include "jni/**/libtmpfile.so"
        }
    }
}

preBuild.dependsOn extractLibtmpfileSoForLinkingInCMake
